# Defines the address spaces/blocks for each addressible device
MEMORY {
    ZEROPAGE:   start = $0000, size = $0100, file = "", define = yes;
    RAM:        start = $0200, size = $3e00, file = "", define = yes;
    VRAM:       start = $4000, size = $1000, file = "";
    FIRMWARE:   start = $5000, size = $2000, file = "%O_fw.bin";
    IO:         start = $7000, size = $1000, file = "%O_io.bin"; # actual values matter in simulation only
    ROM:        start = $8000, size = $8000, file = "%O_rom.bin";
}

SEGMENTS {
    ZEROPAGE:           load = ZEROPAGE, type = zp;

    # Block Starting Segment, stores all uninitialized global variables
    # Why this memory segment exists: https://stackoverflow.com/a/9535579/3339274
    BSS:                load = RAM, type = bss, define = yes, optional = yes;

    # VRAM memory segments
    PMF:                load = VRAM, type = rw, start = $4000;
    PMB:                load = VRAM, type = rw, start = $4200;
    NTBL:               load = VRAM, type = rw, start = $4400;
    OBM:                load = VRAM, type = rw, start = $4800;
    TXBL:               load = VRAM, type = rw, start = $4900;

    FPGA_FW_HEADER:     load = FIRMWARE, type = ro, start = $5000; # Firmware version identifier
    STARTUP:            load = FIRMWARE, type = ro;
    ONCE:               load = FIRMWARE, type = ro, optional = yes;
    FIRMWARE_CODE:      load = FIRMWARE, type = ro;

    # Game controller button IO segment
    IO:                 load = IO, type = rw, start = $7000;

    # Game code
    ROM_FW_HEADER:      load = ROM, type = ro, start = $8000; # Firmware version idenfifier
    ROM_GAME_HEADER:    load = ROM, type = ro, optional = yes; # Game version idenfifier
    RODATA:             load = ROM, type = ro, define = yes, optional = yes;
    DATA:               load = ROM, type = rw, define = yes, run = RAM, optional = yes;
    CODE:               load = ROM, type = ro, start = $c000, optional = yes;
    GAMEVECTORS:        load = ROM, type = overwrite, start = $fff4;
    VECTORS:            load = ROM, type = overwrite, start = $fffa;
}

SYMBOLS {
    __STACKSIZE__:  value = $0200, type = weak;
}
